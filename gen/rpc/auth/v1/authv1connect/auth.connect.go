// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/auth/v1/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/imkrish7/ecoship-api/gen/rpc/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginServiceProcedure is the fully-qualified name of the AuthService's LoginService
	// RPC.
	AuthServiceLoginServiceProcedure = "/auth.v1.AuthService/LoginService"
	// AuthServiceSignupServiceProcedure is the fully-qualified name of the AuthService's SignupService
	// RPC.
	AuthServiceSignupServiceProcedure = "/auth.v1.AuthService/SignupService"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	authServiceServiceDescriptor             = v1.File_rpc_auth_v1_auth_proto.Services().ByName("AuthService")
	authServiceLoginServiceMethodDescriptor  = authServiceServiceDescriptor.Methods().ByName("LoginService")
	authServiceSignupServiceMethodDescriptor = authServiceServiceDescriptor.Methods().ByName("SignupService")
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	LoginService(context.Context, *connect.Request[v1.LoginServiceRequest]) (*connect.Response[v1.LoginServiceResponse], error)
	SignupService(context.Context, *connect.Request[v1.SignupServiceRequest]) (*connect.Response[v1.SignupServiceResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		loginService: connect.NewClient[v1.LoginServiceRequest, v1.LoginServiceResponse](
			httpClient,
			baseURL+AuthServiceLoginServiceProcedure,
			connect.WithSchema(authServiceLoginServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		signupService: connect.NewClient[v1.SignupServiceRequest, v1.SignupServiceResponse](
			httpClient,
			baseURL+AuthServiceSignupServiceProcedure,
			connect.WithSchema(authServiceSignupServiceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	loginService  *connect.Client[v1.LoginServiceRequest, v1.LoginServiceResponse]
	signupService *connect.Client[v1.SignupServiceRequest, v1.SignupServiceResponse]
}

// LoginService calls auth.v1.AuthService.LoginService.
func (c *authServiceClient) LoginService(ctx context.Context, req *connect.Request[v1.LoginServiceRequest]) (*connect.Response[v1.LoginServiceResponse], error) {
	return c.loginService.CallUnary(ctx, req)
}

// SignupService calls auth.v1.AuthService.SignupService.
func (c *authServiceClient) SignupService(ctx context.Context, req *connect.Request[v1.SignupServiceRequest]) (*connect.Response[v1.SignupServiceResponse], error) {
	return c.signupService.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	LoginService(context.Context, *connect.Request[v1.LoginServiceRequest]) (*connect.Response[v1.LoginServiceResponse], error)
	SignupService(context.Context, *connect.Request[v1.SignupServiceRequest]) (*connect.Response[v1.SignupServiceResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceLoginServiceHandler := connect.NewUnaryHandler(
		AuthServiceLoginServiceProcedure,
		svc.LoginService,
		connect.WithSchema(authServiceLoginServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	authServiceSignupServiceHandler := connect.NewUnaryHandler(
		AuthServiceSignupServiceProcedure,
		svc.SignupService,
		connect.WithSchema(authServiceSignupServiceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginServiceProcedure:
			authServiceLoginServiceHandler.ServeHTTP(w, r)
		case AuthServiceSignupServiceProcedure:
			authServiceSignupServiceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) LoginService(context.Context, *connect.Request[v1.LoginServiceRequest]) (*connect.Response[v1.LoginServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.LoginService is not implemented"))
}

func (UnimplementedAuthServiceHandler) SignupService(context.Context, *connect.Request[v1.SignupServiceRequest]) (*connect.Response[v1.SignupServiceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.SignupService is not implemented"))
}
