// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/product/v1/product.proto

package productv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/imkrish7/ecoship-api/gen/rpc/product/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "product.v1.ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductServiceCreateProductProcedure is the fully-qualified name of the ProductService's
	// CreateProduct RPC.
	ProductServiceCreateProductProcedure = "/product.v1.ProductService/CreateProduct"
	// ProductServiceGetProductByIdProcedure is the fully-qualified name of the ProductService's
	// GetProductById RPC.
	ProductServiceGetProductByIdProcedure = "/product.v1.ProductService/GetProductById"
	// ProductServiceRemoveProductByIdProcedure is the fully-qualified name of the ProductService's
	// RemoveProductById RPC.
	ProductServiceRemoveProductByIdProcedure = "/product.v1.ProductService/RemoveProductById"
	// ProductServiceUpdateProductByIdProcedure is the fully-qualified name of the ProductService's
	// UpdateProductById RPC.
	ProductServiceUpdateProductByIdProcedure = "/product.v1.ProductService/UpdateProductById"
	// ProductServiceGetProductsProcedure is the fully-qualified name of the ProductService's
	// GetProducts RPC.
	ProductServiceGetProductsProcedure = "/product.v1.ProductService/GetProducts"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	productServiceServiceDescriptor                 = v1.File_rpc_product_v1_product_proto.Services().ByName("ProductService")
	productServiceCreateProductMethodDescriptor     = productServiceServiceDescriptor.Methods().ByName("CreateProduct")
	productServiceGetProductByIdMethodDescriptor    = productServiceServiceDescriptor.Methods().ByName("GetProductById")
	productServiceRemoveProductByIdMethodDescriptor = productServiceServiceDescriptor.Methods().ByName("RemoveProductById")
	productServiceUpdateProductByIdMethodDescriptor = productServiceServiceDescriptor.Methods().ByName("UpdateProductById")
	productServiceGetProductsMethodDescriptor       = productServiceServiceDescriptor.Methods().ByName("GetProducts")
)

// ProductServiceClient is a client for the product.v1.ProductService service.
type ProductServiceClient interface {
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
	GetProductById(context.Context, *connect.Request[v1.GetProductByIdRequest]) (*connect.Response[v1.GetProductByIdResponse], error)
	RemoveProductById(context.Context, *connect.Request[v1.RemoveProductByIdRequest]) (*connect.Response[v1.RemoveProductByIdResponse], error)
	UpdateProductById(context.Context, *connect.Request[v1.UpdateProductByIdRequest]) (*connect.Response[v1.UpdateProductByIdResponse], error)
	GetProducts(context.Context, *connect.Request[v1.GetProductsRequest]) (*connect.Response[v1.GetProductsResponse], error)
}

// NewProductServiceClient constructs a client for the product.v1.ProductService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &productServiceClient{
		createProduct: connect.NewClient[v1.CreateProductRequest, v1.CreateProductResponse](
			httpClient,
			baseURL+ProductServiceCreateProductProcedure,
			connect.WithSchema(productServiceCreateProductMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProductById: connect.NewClient[v1.GetProductByIdRequest, v1.GetProductByIdResponse](
			httpClient,
			baseURL+ProductServiceGetProductByIdProcedure,
			connect.WithSchema(productServiceGetProductByIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeProductById: connect.NewClient[v1.RemoveProductByIdRequest, v1.RemoveProductByIdResponse](
			httpClient,
			baseURL+ProductServiceRemoveProductByIdProcedure,
			connect.WithSchema(productServiceRemoveProductByIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateProductById: connect.NewClient[v1.UpdateProductByIdRequest, v1.UpdateProductByIdResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductByIdProcedure,
			connect.WithSchema(productServiceUpdateProductByIdMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getProducts: connect.NewClient[v1.GetProductsRequest, v1.GetProductsResponse](
			httpClient,
			baseURL+ProductServiceGetProductsProcedure,
			connect.WithSchema(productServiceGetProductsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	createProduct     *connect.Client[v1.CreateProductRequest, v1.CreateProductResponse]
	getProductById    *connect.Client[v1.GetProductByIdRequest, v1.GetProductByIdResponse]
	removeProductById *connect.Client[v1.RemoveProductByIdRequest, v1.RemoveProductByIdResponse]
	updateProductById *connect.Client[v1.UpdateProductByIdRequest, v1.UpdateProductByIdResponse]
	getProducts       *connect.Client[v1.GetProductsRequest, v1.GetProductsResponse]
}

// CreateProduct calls product.v1.ProductService.CreateProduct.
func (c *productServiceClient) CreateProduct(ctx context.Context, req *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// GetProductById calls product.v1.ProductService.GetProductById.
func (c *productServiceClient) GetProductById(ctx context.Context, req *connect.Request[v1.GetProductByIdRequest]) (*connect.Response[v1.GetProductByIdResponse], error) {
	return c.getProductById.CallUnary(ctx, req)
}

// RemoveProductById calls product.v1.ProductService.RemoveProductById.
func (c *productServiceClient) RemoveProductById(ctx context.Context, req *connect.Request[v1.RemoveProductByIdRequest]) (*connect.Response[v1.RemoveProductByIdResponse], error) {
	return c.removeProductById.CallUnary(ctx, req)
}

// UpdateProductById calls product.v1.ProductService.UpdateProductById.
func (c *productServiceClient) UpdateProductById(ctx context.Context, req *connect.Request[v1.UpdateProductByIdRequest]) (*connect.Response[v1.UpdateProductByIdResponse], error) {
	return c.updateProductById.CallUnary(ctx, req)
}

// GetProducts calls product.v1.ProductService.GetProducts.
func (c *productServiceClient) GetProducts(ctx context.Context, req *connect.Request[v1.GetProductsRequest]) (*connect.Response[v1.GetProductsResponse], error) {
	return c.getProducts.CallUnary(ctx, req)
}

// ProductServiceHandler is an implementation of the product.v1.ProductService service.
type ProductServiceHandler interface {
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
	GetProductById(context.Context, *connect.Request[v1.GetProductByIdRequest]) (*connect.Response[v1.GetProductByIdResponse], error)
	RemoveProductById(context.Context, *connect.Request[v1.RemoveProductByIdRequest]) (*connect.Response[v1.RemoveProductByIdResponse], error)
	UpdateProductById(context.Context, *connect.Request[v1.UpdateProductByIdRequest]) (*connect.Response[v1.UpdateProductByIdResponse], error)
	GetProducts(context.Context, *connect.Request[v1.GetProductsRequest]) (*connect.Response[v1.GetProductsResponse], error)
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productServiceCreateProductHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductProcedure,
		svc.CreateProduct,
		connect.WithSchema(productServiceCreateProductMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductByIdHandler := connect.NewUnaryHandler(
		ProductServiceGetProductByIdProcedure,
		svc.GetProductById,
		connect.WithSchema(productServiceGetProductByIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceRemoveProductByIdHandler := connect.NewUnaryHandler(
		ProductServiceRemoveProductByIdProcedure,
		svc.RemoveProductById,
		connect.WithSchema(productServiceRemoveProductByIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductByIdHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductByIdProcedure,
		svc.UpdateProductById,
		connect.WithSchema(productServiceUpdateProductByIdMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductsHandler := connect.NewUnaryHandler(
		ProductServiceGetProductsProcedure,
		svc.GetProducts,
		connect.WithSchema(productServiceGetProductsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/product.v1.ProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductServiceCreateProductProcedure:
			productServiceCreateProductHandler.ServeHTTP(w, r)
		case ProductServiceGetProductByIdProcedure:
			productServiceGetProductByIdHandler.ServeHTTP(w, r)
		case ProductServiceRemoveProductByIdProcedure:
			productServiceRemoveProductByIdHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductByIdProcedure:
			productServiceUpdateProductByIdHandler.ServeHTTP(w, r)
		case ProductServiceGetProductsProcedure:
			productServiceGetProductsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProductById(context.Context, *connect.Request[v1.GetProductByIdRequest]) (*connect.Response[v1.GetProductByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProductById is not implemented"))
}

func (UnimplementedProductServiceHandler) RemoveProductById(context.Context, *connect.Request[v1.RemoveProductByIdRequest]) (*connect.Response[v1.RemoveProductByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.RemoveProductById is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProductById(context.Context, *connect.Request[v1.UpdateProductByIdRequest]) (*connect.Response[v1.UpdateProductByIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateProductById is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProducts(context.Context, *connect.Request[v1.GetProductsRequest]) (*connect.Response[v1.GetProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProducts is not implemented"))
}
