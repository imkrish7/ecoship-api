// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/kyc/v1/kyc.proto

package kyc1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/imkrish7/ecoship-api/gen/rpc/kyc/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KycServiceName is the fully-qualified name of the KycService service.
	KycServiceName = "kyc.v1.KycService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KycServiceCompleteKycProcedure is the fully-qualified name of the KycService's CompleteKyc RPC.
	KycServiceCompleteKycProcedure = "/kyc.v1.KycService/CompleteKyc"
	// KycServiceUpdateKycProcedure is the fully-qualified name of the KycService's UpdateKyc RPC.
	KycServiceUpdateKycProcedure = "/kyc.v1.KycService/UpdateKyc"
	// KycServiceDeleteKycProcedure is the fully-qualified name of the KycService's DeleteKyc RPC.
	KycServiceDeleteKycProcedure = "/kyc.v1.KycService/DeleteKyc"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	kycServiceServiceDescriptor           = v1.File_rpc_kyc_v1_kyc_proto.Services().ByName("KycService")
	kycServiceCompleteKycMethodDescriptor = kycServiceServiceDescriptor.Methods().ByName("CompleteKyc")
	kycServiceUpdateKycMethodDescriptor   = kycServiceServiceDescriptor.Methods().ByName("UpdateKyc")
	kycServiceDeleteKycMethodDescriptor   = kycServiceServiceDescriptor.Methods().ByName("DeleteKyc")
)

// KycServiceClient is a client for the kyc.v1.KycService service.
type KycServiceClient interface {
	CompleteKyc(context.Context, *connect.Request[v1.CompleteKycRequest]) (*connect.Response[v1.CompleteKycResponse], error)
	UpdateKyc(context.Context, *connect.Request[v1.UpdateKycRequest]) (*connect.Response[v1.UpdateKycResponse], error)
	DeleteKyc(context.Context, *connect.Request[v1.DeleteKycRequest]) (*connect.Response[v1.DeleteKycResponse], error)
}

// NewKycServiceClient constructs a client for the kyc.v1.KycService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKycServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KycServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kycServiceClient{
		completeKyc: connect.NewClient[v1.CompleteKycRequest, v1.CompleteKycResponse](
			httpClient,
			baseURL+KycServiceCompleteKycProcedure,
			connect.WithSchema(kycServiceCompleteKycMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateKyc: connect.NewClient[v1.UpdateKycRequest, v1.UpdateKycResponse](
			httpClient,
			baseURL+KycServiceUpdateKycProcedure,
			connect.WithSchema(kycServiceUpdateKycMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteKyc: connect.NewClient[v1.DeleteKycRequest, v1.DeleteKycResponse](
			httpClient,
			baseURL+KycServiceDeleteKycProcedure,
			connect.WithSchema(kycServiceDeleteKycMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// kycServiceClient implements KycServiceClient.
type kycServiceClient struct {
	completeKyc *connect.Client[v1.CompleteKycRequest, v1.CompleteKycResponse]
	updateKyc   *connect.Client[v1.UpdateKycRequest, v1.UpdateKycResponse]
	deleteKyc   *connect.Client[v1.DeleteKycRequest, v1.DeleteKycResponse]
}

// CompleteKyc calls kyc.v1.KycService.CompleteKyc.
func (c *kycServiceClient) CompleteKyc(ctx context.Context, req *connect.Request[v1.CompleteKycRequest]) (*connect.Response[v1.CompleteKycResponse], error) {
	return c.completeKyc.CallUnary(ctx, req)
}

// UpdateKyc calls kyc.v1.KycService.UpdateKyc.
func (c *kycServiceClient) UpdateKyc(ctx context.Context, req *connect.Request[v1.UpdateKycRequest]) (*connect.Response[v1.UpdateKycResponse], error) {
	return c.updateKyc.CallUnary(ctx, req)
}

// DeleteKyc calls kyc.v1.KycService.DeleteKyc.
func (c *kycServiceClient) DeleteKyc(ctx context.Context, req *connect.Request[v1.DeleteKycRequest]) (*connect.Response[v1.DeleteKycResponse], error) {
	return c.deleteKyc.CallUnary(ctx, req)
}

// KycServiceHandler is an implementation of the kyc.v1.KycService service.
type KycServiceHandler interface {
	CompleteKyc(context.Context, *connect.Request[v1.CompleteKycRequest]) (*connect.Response[v1.CompleteKycResponse], error)
	UpdateKyc(context.Context, *connect.Request[v1.UpdateKycRequest]) (*connect.Response[v1.UpdateKycResponse], error)
	DeleteKyc(context.Context, *connect.Request[v1.DeleteKycRequest]) (*connect.Response[v1.DeleteKycResponse], error)
}

// NewKycServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKycServiceHandler(svc KycServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kycServiceCompleteKycHandler := connect.NewUnaryHandler(
		KycServiceCompleteKycProcedure,
		svc.CompleteKyc,
		connect.WithSchema(kycServiceCompleteKycMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kycServiceUpdateKycHandler := connect.NewUnaryHandler(
		KycServiceUpdateKycProcedure,
		svc.UpdateKyc,
		connect.WithSchema(kycServiceUpdateKycMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kycServiceDeleteKycHandler := connect.NewUnaryHandler(
		KycServiceDeleteKycProcedure,
		svc.DeleteKyc,
		connect.WithSchema(kycServiceDeleteKycMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/kyc.v1.KycService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KycServiceCompleteKycProcedure:
			kycServiceCompleteKycHandler.ServeHTTP(w, r)
		case KycServiceUpdateKycProcedure:
			kycServiceUpdateKycHandler.ServeHTTP(w, r)
		case KycServiceDeleteKycProcedure:
			kycServiceDeleteKycHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKycServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKycServiceHandler struct{}

func (UnimplementedKycServiceHandler) CompleteKyc(context.Context, *connect.Request[v1.CompleteKycRequest]) (*connect.Response[v1.CompleteKycResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kyc.v1.KycService.CompleteKyc is not implemented"))
}

func (UnimplementedKycServiceHandler) UpdateKyc(context.Context, *connect.Request[v1.UpdateKycRequest]) (*connect.Response[v1.UpdateKycResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kyc.v1.KycService.UpdateKyc is not implemented"))
}

func (UnimplementedKycServiceHandler) DeleteKyc(context.Context, *connect.Request[v1.DeleteKycRequest]) (*connect.Response[v1.DeleteKycResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kyc.v1.KycService.DeleteKyc is not implemented"))
}
