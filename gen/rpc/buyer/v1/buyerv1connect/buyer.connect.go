// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: rpc/buyer/v1/buyer.proto

package buyerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/imkrish7/ecoship-api/gen/rpc/buyer/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BuyerServiceName is the fully-qualified name of the BuyerService service.
	BuyerServiceName = "buyer.v1.BuyerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BuyerServiceCreateBuyerProcedure is the fully-qualified name of the BuyerService's CreateBuyer
	// RPC.
	BuyerServiceCreateBuyerProcedure = "/buyer.v1.BuyerService/CreateBuyer"
	// BuyerServiceUpdateBuyerProcedure is the fully-qualified name of the BuyerService's UpdateBuyer
	// RPC.
	BuyerServiceUpdateBuyerProcedure = "/buyer.v1.BuyerService/UpdateBuyer"
	// BuyerServiceGetBuyerProcedure is the fully-qualified name of the BuyerService's GetBuyer RPC.
	BuyerServiceGetBuyerProcedure = "/buyer.v1.BuyerService/GetBuyer"
	// BuyerServiceDeactivateBuyerProcedure is the fully-qualified name of the BuyerService's
	// DeactivateBuyer RPC.
	BuyerServiceDeactivateBuyerProcedure = "/buyer.v1.BuyerService/DeactivateBuyer"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	buyerServiceServiceDescriptor               = v1.File_rpc_buyer_v1_buyer_proto.Services().ByName("BuyerService")
	buyerServiceCreateBuyerMethodDescriptor     = buyerServiceServiceDescriptor.Methods().ByName("CreateBuyer")
	buyerServiceUpdateBuyerMethodDescriptor     = buyerServiceServiceDescriptor.Methods().ByName("UpdateBuyer")
	buyerServiceGetBuyerMethodDescriptor        = buyerServiceServiceDescriptor.Methods().ByName("GetBuyer")
	buyerServiceDeactivateBuyerMethodDescriptor = buyerServiceServiceDescriptor.Methods().ByName("DeactivateBuyer")
)

// BuyerServiceClient is a client for the buyer.v1.BuyerService service.
type BuyerServiceClient interface {
	CreateBuyer(context.Context, *connect.Request[v1.CreateBuyerRequest]) (*connect.Response[v1.CreateBuyerResponse], error)
	UpdateBuyer(context.Context, *connect.Request[v1.UpdateBuyerRequest]) (*connect.Response[v1.UpdateBuyerResponse], error)
	GetBuyer(context.Context, *connect.Request[v1.GetBuyerRequest]) (*connect.Response[v1.GetBuyerResponse], error)
	DeactivateBuyer(context.Context, *connect.Request[v1.DeactivateBuyerRequest]) (*connect.Response[v1.DeactivateBuyerResponse], error)
}

// NewBuyerServiceClient constructs a client for the buyer.v1.BuyerService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBuyerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BuyerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &buyerServiceClient{
		createBuyer: connect.NewClient[v1.CreateBuyerRequest, v1.CreateBuyerResponse](
			httpClient,
			baseURL+BuyerServiceCreateBuyerProcedure,
			connect.WithSchema(buyerServiceCreateBuyerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateBuyer: connect.NewClient[v1.UpdateBuyerRequest, v1.UpdateBuyerResponse](
			httpClient,
			baseURL+BuyerServiceUpdateBuyerProcedure,
			connect.WithSchema(buyerServiceUpdateBuyerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getBuyer: connect.NewClient[v1.GetBuyerRequest, v1.GetBuyerResponse](
			httpClient,
			baseURL+BuyerServiceGetBuyerProcedure,
			connect.WithSchema(buyerServiceGetBuyerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deactivateBuyer: connect.NewClient[v1.DeactivateBuyerRequest, v1.DeactivateBuyerResponse](
			httpClient,
			baseURL+BuyerServiceDeactivateBuyerProcedure,
			connect.WithSchema(buyerServiceDeactivateBuyerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// buyerServiceClient implements BuyerServiceClient.
type buyerServiceClient struct {
	createBuyer     *connect.Client[v1.CreateBuyerRequest, v1.CreateBuyerResponse]
	updateBuyer     *connect.Client[v1.UpdateBuyerRequest, v1.UpdateBuyerResponse]
	getBuyer        *connect.Client[v1.GetBuyerRequest, v1.GetBuyerResponse]
	deactivateBuyer *connect.Client[v1.DeactivateBuyerRequest, v1.DeactivateBuyerResponse]
}

// CreateBuyer calls buyer.v1.BuyerService.CreateBuyer.
func (c *buyerServiceClient) CreateBuyer(ctx context.Context, req *connect.Request[v1.CreateBuyerRequest]) (*connect.Response[v1.CreateBuyerResponse], error) {
	return c.createBuyer.CallUnary(ctx, req)
}

// UpdateBuyer calls buyer.v1.BuyerService.UpdateBuyer.
func (c *buyerServiceClient) UpdateBuyer(ctx context.Context, req *connect.Request[v1.UpdateBuyerRequest]) (*connect.Response[v1.UpdateBuyerResponse], error) {
	return c.updateBuyer.CallUnary(ctx, req)
}

// GetBuyer calls buyer.v1.BuyerService.GetBuyer.
func (c *buyerServiceClient) GetBuyer(ctx context.Context, req *connect.Request[v1.GetBuyerRequest]) (*connect.Response[v1.GetBuyerResponse], error) {
	return c.getBuyer.CallUnary(ctx, req)
}

// DeactivateBuyer calls buyer.v1.BuyerService.DeactivateBuyer.
func (c *buyerServiceClient) DeactivateBuyer(ctx context.Context, req *connect.Request[v1.DeactivateBuyerRequest]) (*connect.Response[v1.DeactivateBuyerResponse], error) {
	return c.deactivateBuyer.CallUnary(ctx, req)
}

// BuyerServiceHandler is an implementation of the buyer.v1.BuyerService service.
type BuyerServiceHandler interface {
	CreateBuyer(context.Context, *connect.Request[v1.CreateBuyerRequest]) (*connect.Response[v1.CreateBuyerResponse], error)
	UpdateBuyer(context.Context, *connect.Request[v1.UpdateBuyerRequest]) (*connect.Response[v1.UpdateBuyerResponse], error)
	GetBuyer(context.Context, *connect.Request[v1.GetBuyerRequest]) (*connect.Response[v1.GetBuyerResponse], error)
	DeactivateBuyer(context.Context, *connect.Request[v1.DeactivateBuyerRequest]) (*connect.Response[v1.DeactivateBuyerResponse], error)
}

// NewBuyerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBuyerServiceHandler(svc BuyerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	buyerServiceCreateBuyerHandler := connect.NewUnaryHandler(
		BuyerServiceCreateBuyerProcedure,
		svc.CreateBuyer,
		connect.WithSchema(buyerServiceCreateBuyerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	buyerServiceUpdateBuyerHandler := connect.NewUnaryHandler(
		BuyerServiceUpdateBuyerProcedure,
		svc.UpdateBuyer,
		connect.WithSchema(buyerServiceUpdateBuyerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	buyerServiceGetBuyerHandler := connect.NewUnaryHandler(
		BuyerServiceGetBuyerProcedure,
		svc.GetBuyer,
		connect.WithSchema(buyerServiceGetBuyerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	buyerServiceDeactivateBuyerHandler := connect.NewUnaryHandler(
		BuyerServiceDeactivateBuyerProcedure,
		svc.DeactivateBuyer,
		connect.WithSchema(buyerServiceDeactivateBuyerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/buyer.v1.BuyerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BuyerServiceCreateBuyerProcedure:
			buyerServiceCreateBuyerHandler.ServeHTTP(w, r)
		case BuyerServiceUpdateBuyerProcedure:
			buyerServiceUpdateBuyerHandler.ServeHTTP(w, r)
		case BuyerServiceGetBuyerProcedure:
			buyerServiceGetBuyerHandler.ServeHTTP(w, r)
		case BuyerServiceDeactivateBuyerProcedure:
			buyerServiceDeactivateBuyerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBuyerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBuyerServiceHandler struct{}

func (UnimplementedBuyerServiceHandler) CreateBuyer(context.Context, *connect.Request[v1.CreateBuyerRequest]) (*connect.Response[v1.CreateBuyerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buyer.v1.BuyerService.CreateBuyer is not implemented"))
}

func (UnimplementedBuyerServiceHandler) UpdateBuyer(context.Context, *connect.Request[v1.UpdateBuyerRequest]) (*connect.Response[v1.UpdateBuyerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buyer.v1.BuyerService.UpdateBuyer is not implemented"))
}

func (UnimplementedBuyerServiceHandler) GetBuyer(context.Context, *connect.Request[v1.GetBuyerRequest]) (*connect.Response[v1.GetBuyerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buyer.v1.BuyerService.GetBuyer is not implemented"))
}

func (UnimplementedBuyerServiceHandler) DeactivateBuyer(context.Context, *connect.Request[v1.DeactivateBuyerRequest]) (*connect.Response[v1.DeactivateBuyerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("buyer.v1.BuyerService.DeactivateBuyer is not implemented"))
}
