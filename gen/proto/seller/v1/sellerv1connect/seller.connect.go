// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/seller/v1/seller.proto

package sellerv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/imkrish7/ecoship-api/gen/proto/seller/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SellerServiceName is the fully-qualified name of the SellerService service.
	SellerServiceName = "proto.seller.v1.SellerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SellerServiceCreateSellerProcedure is the fully-qualified name of the SellerService's
	// CreateSeller RPC.
	SellerServiceCreateSellerProcedure = "/proto.seller.v1.SellerService/CreateSeller"
	// SellerServiceUpdateSellerProcedure is the fully-qualified name of the SellerService's
	// UpdateSeller RPC.
	SellerServiceUpdateSellerProcedure = "/proto.seller.v1.SellerService/UpdateSeller"
	// SellerServiceGetSellerProcedure is the fully-qualified name of the SellerService's GetSeller RPC.
	SellerServiceGetSellerProcedure = "/proto.seller.v1.SellerService/GetSeller"
	// SellerServiceDeactivateSellerProcedure is the fully-qualified name of the SellerService's
	// DeactivateSeller RPC.
	SellerServiceDeactivateSellerProcedure = "/proto.seller.v1.SellerService/DeactivateSeller"
	// SellerServiceUpdateKycStatusProcedure is the fully-qualified name of the SellerService's
	// UpdateKycStatus RPC.
	SellerServiceUpdateKycStatusProcedure = "/proto.seller.v1.SellerService/UpdateKycStatus"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sellerServiceServiceDescriptor                = v1.File_proto_seller_v1_seller_proto.Services().ByName("SellerService")
	sellerServiceCreateSellerMethodDescriptor     = sellerServiceServiceDescriptor.Methods().ByName("CreateSeller")
	sellerServiceUpdateSellerMethodDescriptor     = sellerServiceServiceDescriptor.Methods().ByName("UpdateSeller")
	sellerServiceGetSellerMethodDescriptor        = sellerServiceServiceDescriptor.Methods().ByName("GetSeller")
	sellerServiceDeactivateSellerMethodDescriptor = sellerServiceServiceDescriptor.Methods().ByName("DeactivateSeller")
	sellerServiceUpdateKycStatusMethodDescriptor  = sellerServiceServiceDescriptor.Methods().ByName("UpdateKycStatus")
)

// SellerServiceClient is a client for the proto.seller.v1.SellerService service.
type SellerServiceClient interface {
	CreateSeller(context.Context, *connect.Request[v1.CreateSellerRequest]) (*connect.Response[v1.CreateSellerResponse], error)
	UpdateSeller(context.Context, *connect.Request[v1.UpdateSellerRequest]) (*connect.Response[v1.UpdateSellerResponse], error)
	GetSeller(context.Context, *connect.Request[v1.GetSellerRequest]) (*connect.Response[v1.GetSellerResponse], error)
	DeactivateSeller(context.Context, *connect.Request[v1.DeactivateSellerRequest]) (*connect.Response[v1.DeactivateSellerResponse], error)
	UpdateKycStatus(context.Context, *connect.Request[v1.UpdateKycStatusRequest]) (*connect.Response[v1.UpdateKycStatusResponse], error)
}

// NewSellerServiceClient constructs a client for the proto.seller.v1.SellerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSellerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SellerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sellerServiceClient{
		createSeller: connect.NewClient[v1.CreateSellerRequest, v1.CreateSellerResponse](
			httpClient,
			baseURL+SellerServiceCreateSellerProcedure,
			connect.WithSchema(sellerServiceCreateSellerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSeller: connect.NewClient[v1.UpdateSellerRequest, v1.UpdateSellerResponse](
			httpClient,
			baseURL+SellerServiceUpdateSellerProcedure,
			connect.WithSchema(sellerServiceUpdateSellerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSeller: connect.NewClient[v1.GetSellerRequest, v1.GetSellerResponse](
			httpClient,
			baseURL+SellerServiceGetSellerProcedure,
			connect.WithSchema(sellerServiceGetSellerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deactivateSeller: connect.NewClient[v1.DeactivateSellerRequest, v1.DeactivateSellerResponse](
			httpClient,
			baseURL+SellerServiceDeactivateSellerProcedure,
			connect.WithSchema(sellerServiceDeactivateSellerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateKycStatus: connect.NewClient[v1.UpdateKycStatusRequest, v1.UpdateKycStatusResponse](
			httpClient,
			baseURL+SellerServiceUpdateKycStatusProcedure,
			connect.WithSchema(sellerServiceUpdateKycStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sellerServiceClient implements SellerServiceClient.
type sellerServiceClient struct {
	createSeller     *connect.Client[v1.CreateSellerRequest, v1.CreateSellerResponse]
	updateSeller     *connect.Client[v1.UpdateSellerRequest, v1.UpdateSellerResponse]
	getSeller        *connect.Client[v1.GetSellerRequest, v1.GetSellerResponse]
	deactivateSeller *connect.Client[v1.DeactivateSellerRequest, v1.DeactivateSellerResponse]
	updateKycStatus  *connect.Client[v1.UpdateKycStatusRequest, v1.UpdateKycStatusResponse]
}

// CreateSeller calls proto.seller.v1.SellerService.CreateSeller.
func (c *sellerServiceClient) CreateSeller(ctx context.Context, req *connect.Request[v1.CreateSellerRequest]) (*connect.Response[v1.CreateSellerResponse], error) {
	return c.createSeller.CallUnary(ctx, req)
}

// UpdateSeller calls proto.seller.v1.SellerService.UpdateSeller.
func (c *sellerServiceClient) UpdateSeller(ctx context.Context, req *connect.Request[v1.UpdateSellerRequest]) (*connect.Response[v1.UpdateSellerResponse], error) {
	return c.updateSeller.CallUnary(ctx, req)
}

// GetSeller calls proto.seller.v1.SellerService.GetSeller.
func (c *sellerServiceClient) GetSeller(ctx context.Context, req *connect.Request[v1.GetSellerRequest]) (*connect.Response[v1.GetSellerResponse], error) {
	return c.getSeller.CallUnary(ctx, req)
}

// DeactivateSeller calls proto.seller.v1.SellerService.DeactivateSeller.
func (c *sellerServiceClient) DeactivateSeller(ctx context.Context, req *connect.Request[v1.DeactivateSellerRequest]) (*connect.Response[v1.DeactivateSellerResponse], error) {
	return c.deactivateSeller.CallUnary(ctx, req)
}

// UpdateKycStatus calls proto.seller.v1.SellerService.UpdateKycStatus.
func (c *sellerServiceClient) UpdateKycStatus(ctx context.Context, req *connect.Request[v1.UpdateKycStatusRequest]) (*connect.Response[v1.UpdateKycStatusResponse], error) {
	return c.updateKycStatus.CallUnary(ctx, req)
}

// SellerServiceHandler is an implementation of the proto.seller.v1.SellerService service.
type SellerServiceHandler interface {
	CreateSeller(context.Context, *connect.Request[v1.CreateSellerRequest]) (*connect.Response[v1.CreateSellerResponse], error)
	UpdateSeller(context.Context, *connect.Request[v1.UpdateSellerRequest]) (*connect.Response[v1.UpdateSellerResponse], error)
	GetSeller(context.Context, *connect.Request[v1.GetSellerRequest]) (*connect.Response[v1.GetSellerResponse], error)
	DeactivateSeller(context.Context, *connect.Request[v1.DeactivateSellerRequest]) (*connect.Response[v1.DeactivateSellerResponse], error)
	UpdateKycStatus(context.Context, *connect.Request[v1.UpdateKycStatusRequest]) (*connect.Response[v1.UpdateKycStatusResponse], error)
}

// NewSellerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSellerServiceHandler(svc SellerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sellerServiceCreateSellerHandler := connect.NewUnaryHandler(
		SellerServiceCreateSellerProcedure,
		svc.CreateSeller,
		connect.WithSchema(sellerServiceCreateSellerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sellerServiceUpdateSellerHandler := connect.NewUnaryHandler(
		SellerServiceUpdateSellerProcedure,
		svc.UpdateSeller,
		connect.WithSchema(sellerServiceUpdateSellerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sellerServiceGetSellerHandler := connect.NewUnaryHandler(
		SellerServiceGetSellerProcedure,
		svc.GetSeller,
		connect.WithSchema(sellerServiceGetSellerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sellerServiceDeactivateSellerHandler := connect.NewUnaryHandler(
		SellerServiceDeactivateSellerProcedure,
		svc.DeactivateSeller,
		connect.WithSchema(sellerServiceDeactivateSellerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sellerServiceUpdateKycStatusHandler := connect.NewUnaryHandler(
		SellerServiceUpdateKycStatusProcedure,
		svc.UpdateKycStatus,
		connect.WithSchema(sellerServiceUpdateKycStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.seller.v1.SellerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SellerServiceCreateSellerProcedure:
			sellerServiceCreateSellerHandler.ServeHTTP(w, r)
		case SellerServiceUpdateSellerProcedure:
			sellerServiceUpdateSellerHandler.ServeHTTP(w, r)
		case SellerServiceGetSellerProcedure:
			sellerServiceGetSellerHandler.ServeHTTP(w, r)
		case SellerServiceDeactivateSellerProcedure:
			sellerServiceDeactivateSellerHandler.ServeHTTP(w, r)
		case SellerServiceUpdateKycStatusProcedure:
			sellerServiceUpdateKycStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSellerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSellerServiceHandler struct{}

func (UnimplementedSellerServiceHandler) CreateSeller(context.Context, *connect.Request[v1.CreateSellerRequest]) (*connect.Response[v1.CreateSellerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.seller.v1.SellerService.CreateSeller is not implemented"))
}

func (UnimplementedSellerServiceHandler) UpdateSeller(context.Context, *connect.Request[v1.UpdateSellerRequest]) (*connect.Response[v1.UpdateSellerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.seller.v1.SellerService.UpdateSeller is not implemented"))
}

func (UnimplementedSellerServiceHandler) GetSeller(context.Context, *connect.Request[v1.GetSellerRequest]) (*connect.Response[v1.GetSellerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.seller.v1.SellerService.GetSeller is not implemented"))
}

func (UnimplementedSellerServiceHandler) DeactivateSeller(context.Context, *connect.Request[v1.DeactivateSellerRequest]) (*connect.Response[v1.DeactivateSellerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.seller.v1.SellerService.DeactivateSeller is not implemented"))
}

func (UnimplementedSellerServiceHandler) UpdateKycStatus(context.Context, *connect.Request[v1.UpdateKycStatusRequest]) (*connect.Response[v1.UpdateKycStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.seller.v1.SellerService.UpdateKycStatus is not implemented"))
}
